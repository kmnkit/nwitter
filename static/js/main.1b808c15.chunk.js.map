{"version":3,"sources":["fbase.js","components/useTitle.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/useInfiniteScroll.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","getAuth","dbService","getFirestore","storageService","getStorage","useTitle","useState","title","setTitle","useEffect","document","querySelector","innerHTML","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","changeTitle","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","newUser","updateProfile","displayName","signInWithEmailAndPassword","errorMessage","className","icon","faTwitter","type","placeholder","required","onClick","prev","Auth","provider","onSocialClick","event","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","deleteDoc","doc","id","attachmentUrl","deleteObject","ref","toggleEditing","nweetDoc","updateDoc","faChild","creatorId","src","width","height","alt","NweetFactory","userObj","attachment","setAttachment","nweet","setNweet","attachmentRef","uid","uuidv4","uploadString","resp","getDownloadURL","addDoc","collection","createdAt","serverTimestamp","rows","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","page","setPage","handleScroll","documentElement","scrollTop","innerHeight","scrollHeight","p","addEventListener","useInfiniteScroll","nweets","setNweets","last","setLast","q","query","orderBy","limit","onSnapshot","querySnapshot","lastVisible","docs","length","nweetArray","map","data","err","startAfter","datas","uniqBy","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","currentUser","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","from","globalStyles","createGlobalStyle","reset","App","init","setInit","setUserObj","onAuthStateChanged","user","GlobalStyles","Boolean","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1b808c15.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\ninitializeApp(firebaseConfig);\nexport const authService = getAuth();\nexport const dbService = getFirestore();\nexport const storageService = getStorage();","import { useEffect, useState } from \"react\";\n\nconst useTitle = () => {\n    const [title, setTitle] = useState(null);\n\n    const updateTitle = () => {\n        const htmlTitle = document.querySelector('title');\n        htmlTitle.innerHTML = `${title} | Nwitter`;\n    };\n    useEffect(updateTitle, [title]);\n    return setTitle;\n};\n\nexport default useTitle;","import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from '@firebase/auth';\nimport { authService } from 'fbase';\nimport { useEffect, useState } from 'react';\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { updateProfile } from '@firebase/auth';\nimport useTitle from 'components/useTitle';\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const changeTitle = useTitle();\n\n    const onChange = (e) => {\n        const {\n            target: { name, value }\n        } = e;\n        if (name === 'email') {\n            setEmail(value);\n        } else if (name === 'password') {\n            setPassword(value);\n        };\n    };\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (newAccount) {\n                const newUser = await createUserWithEmailAndPassword(\n                    authService, email, password\n                );\n                await updateProfile(newUser, { displayName: \"Anonymous\" });\n            } else {\n                await signInWithEmailAndPassword(\n                    authService, email, password\n                );\n            }\n        } catch (error) {\n            setError(error.errorMessage);\n        }\n    };\n\n    const toggleAccount = () => setNewAccount(prev => !prev);\n\n    useEffect(() => {\n        changeTitle('Auth');\n    }, []);\n\n    return (\n        <>\n            <div className=\"logoBox\">\n                <FontAwesomeIcon className=\"logo\" icon={faTwitter} />\n            </div>\n            <form onSubmit={onSubmit} className=\"LoginForm\">\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                />\n                <div className=\"BtnContainer\">\n                    <input className=\"Btn SignupBtn\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\n                </div>\n                {error}\n            </form>\n            <div className=\"Transform\">\n                <span onClick={toggleAccount}>{newAccount ? \"Click to Log In\" : \"Click to Create Account\"}</span>\n            </div>\n        </>\n    );\n};\n\nexport default AuthForm;","import React from 'react';\nimport { authService } from 'fbase';\nimport {\n    GoogleAuthProvider,\n    GithubAuthProvider,\n    signInWithPopup\n} from \"firebase/auth\";\nimport AuthForm from 'components/AuthForm';\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Auth = () => {\n    let provider;\n    const onSocialClick = async (event) => {\n        const { target: { name } } = event;\n        if (name === 'google') {\n            provider = new GoogleAuthProvider();\n        } else if (name === 'github') {\n            provider = new GithubAuthProvider();\n        };\n        await signInWithPopup(authService, provider);\n    };\n    return (\n        <div>\n            <AuthForm />\n            <div className=\"SocialLoginBox\">\n                <button className=\"Btn GoogleLogin\" onClick={onSocialClick} name=\"google\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\n                <button className=\"Btn GithubLogin\" onClick={onSocialClick} name=\"github\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;","import React, { useState } from 'react';\nimport { dbService, storageService } from 'fbase';\nimport { doc, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { ref, deleteObject } from 'firebase/storage';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChild } from '@fortawesome/free-solid-svg-icons'\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n        if (ok) {\n            await deleteDoc(doc(dbService, \"nweets\", nweetObj.id));\n            if (nweetObj.attachmentUrl !== \"\") {\n                await deleteObject(ref(storageService, nweetObj.attachmentUrl));\n            }\n        }\n    };\n    const toggleEditing = () => setEditing(prev => !prev);\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const nweetDoc = doc(dbService, \"nweets\", nweetObj.id);\n        await updateDoc(nweetDoc, {\n            text: newNweet\n        });\n        setEditing(false);\n    };\n    const onChange = (e) => {\n        const {\n            target: { value }\n        } = e;\n        setNewNweet(value);\n    }\n\n    return (\n        <div key={nweetObj.id}>\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"editNweetBox\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Edit your Nweet\"\n                            value={newNweet}\n                            onChange={onChange}\n                            required\n                        />\n                        <div>\n                            <input type=\"submit\" value=\"Update Nweet\" className=\"Btn updateBtn\" />\n                            <button onClick={toggleEditing} className=\"Btn cancelBtn\">Cancel</button>\n                        </div>\n                    </form>\n                </>\n            ) : (\n                <div className=\"NweetBox\">\n                    <div className=\"PhotoContainer\">\n                        <div className=\"Photo\">\n                            <FontAwesomeIcon className=\"usericon\" icon={faChild} />\n                        </div>\n                    </div>\n                    <div className=\"NweetContainer\">\n                        <span className=\"userInfo\">{nweetObj.creatorId}</span>\n                        <div className=\"NweetContainer__inner\">\n                            <p className=\"nweetText\">\n                                {nweetObj.text}\n                            </p>\n                            {nweetObj.attachmentUrl && (\n                                <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" alt=\"\" />\n                            )}\n                            {isOwner && (\n                                <div className=\"btnContainer\">\n                                    <button className=\"Btn delBtn\" onClick={onDeleteClick}>Delete Nweet</button>\n                                    <button className=\"Btn editBtn\" onClick={toggleEditing}>Edit Nweet</button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n};\n\nexport default Nweet;","import { addDoc, collection, serverTimestamp } from \"@firebase/firestore\";\nimport { getDownloadURL, ref, uploadString } from \"@firebase/storage\";\nimport { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst NweetFactory = ({ userObj }) => {\n    const [attachment, setAttachment] = useState(\"\");\n    const [nweet, setNweet] = useState(\"\");\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let attachmentUrl = \"\";\n        if (attachment !== \"\") {\n            // 스토리지와 레퍼런스 호출\n            const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\n            const resp = await uploadString(attachmentRef, attachment, \"data_url\");\n            attachmentUrl = await getDownloadURL(resp.ref);\n        }\n        // Nweet 텍스트 부분 저장\n        await addDoc(collection(dbService, \"nweets\"), {\n            text: nweet,\n            createdAt: serverTimestamp(),\n            creatorId: userObj.uid,\n            attachmentUrl\n        });\n        setNweet(\"\");\n        setAttachment(\"\");\n    };\n\n    const onChange = (e) => {\n        const { target: { value } } = e;\n        setNweet(value);\n    };\n\n    const onFileChange = (e) => {\n        const { target: { files } } = e;\n        const theFile = files[0]; // multiple에 대비하기 위해 리스트 형태임\n        const reader = new FileReader(); // Browser API        \n        /*\n        onloadend\n        readAsDataURL 함수에 전달할 인자,\n        즉, 파일이 함수로 들어간 이후 결과값이 나온 다음 상황을 감지함\n        그 때 생긴 이벤트값을 사용할 수 있게 해 줌.\n        이벤트 값에는 우리가 원하는 파일 URL이 있음.\n         */\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: { result }\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        /*\n        readAsDataURL\n        파일 정보를 인자로 받아서 파일 위치를 URL로 반환해 줌.\n        단순히 호출하는 방식으로는 사용할 수 없음\n        리액트 생명주기 함수처럼 파일 선택 후,\n        '웹 브라우저가 파일을 인식하는 시점', '웹 브라우저 파일 인식이 끝난 시점' 등을 포함.\n        시점까지 함께 관리해 줘야 URL을 얻을 수 있음.\n         */\n        reader.readAsDataURL(theFile);\n    };\n\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n        <form onSubmit={onSubmit} className=\"nweetForm\">\n            <textarea\n                value={nweet}\n                onChange={onChange}\n                rows=\"5\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n            />\n            <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n            />\n            {attachment && (\n                <div className=\"attachment\">\n                    <img src={attachment} width=\"50px\" height=\"50px\" alt=\"\" />\n                    <button onClick={onClearAttachment}>Clear</button>\n                </div>\n            )}\n            <input\n                className=\"Btn NweetBtn\"\n                type=\"submit\"\n                value=\"Nweet\"\n            />\n        </form>\n    );\n};\n\nexport default NweetFactory;","import uniqBy from \"lodash.uniqby\";\nimport React, { useEffect, useState } from 'react';\nimport { dbService } from 'fbase';\nimport { collection, limit, orderBy, startAfter, onSnapshot, query } from \"firebase/firestore\";\nimport Nweet from 'components/Nweet';\nimport NweetFactory from 'components/NweetFactory';\nimport { useInfiniteScroll } from 'components/useInfiniteScroll';\n\nconst Home = ({ userObj }) => {\n    const items = 10; // 초기 fetch될 데이터 수\n    const page = useInfiniteScroll();\n\n    const [nweets, setNweets] = useState([]);\n    const [error, setError] = useState(false);\n    const [last, setLast] = useState([]);\n\n    useEffect(() => {\n        try {\n            const q = query(\n                collection(\n                    dbService, \"nweets\"),\n                orderBy('createdAt', 'desc'),\n                limit(items));\n            onSnapshot(q, (querySnapshot) => {\n                const lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];\n                setLast(lastVisible);\n                const nweetArray = querySnapshot.docs.map(doc => ({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n                setNweets(nweetArray);\n            });\n        } catch (err) {\n            setError(err);\n        }\n    }, []);\n\n    useEffect(() => {\n        try {\n            const q = query(\n                collection(dbService, \"nweets\"),\n                orderBy('createdAt', 'desc'),\n                startAfter(last),\n                limit(items),\n            );\n            onSnapshot(q, (querySnapshot) => {\n                const lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];\n                setLast(lastVisible);\n                const nweetArray = querySnapshot.docs.map(doc => ({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n                const datas = [...nweets, ...nweetArray];\n                setNweets(uniqBy(datas, \"id\"));\n            });\n        } catch (err) {\n            setError(err);\n        }\n    }, [page]);\n\n    return (\n        <>\n            <NweetFactory userObj={userObj} />\n            <div>\n                {nweets.map(nweet => (\n                    <Nweet\n                        key={nweet.id}\n                        nweetObj={nweet}\n                        isOwner={nweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\nexport default Home;","import { useEffect, useState } from \"react\";\n\nexport function useInfiniteScroll() {\n    const [page, setPage] = useState(1);\n    function handleScroll() {\n        if (\n            document.documentElement.scrollTop + window.innerHeight ===\n            document.documentElement.scrollHeight\n        ) {\n            setPage(p => p + 1);\n        }\n    }\n    useEffect(() => {\n        window.addEventListener(\"scroll\", handleScroll);\n    }, []);\n    return page;\n}\n","import { authService } from 'fbase';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { updateProfile } from 'firebase/auth';\nimport useTitle from 'components/useTitle';\n\n\nconst Profile = ({ userObj, refreshUser }) => {\n    const changeTitle = useTitle();\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    const onChange = (e) => {\n        const {\n            target: { value }\n        } = e;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await updateProfile(authService.currentUser, { displayName: newDisplayName });\n            refreshUser();\n        };\n    };\n\n    useEffect(() => {\n        changeTitle('Profile');\n    }, []);\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input\n                    type=\"text\"\n                    onChange={onChange}\n                    placeholder=\"Display Name\"\n                    value={newDisplayName}\n                />\n                <input type=\"submit\" className=\"Btn updateProfileBtn\" value=\"Update Profile\" />\n            </form>\n            <button onClick={onLogOutClick} className=\"Btn logoutBtn\">Log Out</button>\n        </>\n    )\n};\n\nexport default Profile;","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navigation = ({ userObj }) => {\n    return (<ul>\n        <li>\n            <Link to=\"/\">\n                <div className=\"logoBox\">\n                    <FontAwesomeIcon className=\"logo\" icon={faTwitter} />\n                </div>\n            </Link>\n        </li>\n        <li>\n            <Link to=\"/profile\">\n                {userObj.displayName ? userObj.displayName : \"Anynomous\"}의 Profile\n            </Link>\n        </li>\n    </ul>)\n};\n\nexport default Navigation;","import React from 'react';\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {/* isLoggedIn이 true여야 Navigation이 마운트 됨 */}\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <>\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj} />\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile userObj={userObj} refreshUser={refreshUser} />\n                        </Route>\n                        <Redirect from=\"*\" to=\"/\" />\n                    </>\n                ) : (\n                    <>\n                        <Route exact path=\"/\">\n                            <Auth />\n                        </Route>\n                    </>\n                )\n                }\n            </Switch>\n        </Router>\n    )\n};\n\nexport default AppRouter;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst globalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n        border: none;\n        outline: none;\n    }\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color: skyblue;\n        color:white;\n        padding-top:10px;\n        padding-left: 10px;\n        padding-right: 10px;        \n    }\n`;\n\nexport default globalStyles;","import AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\nimport { useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport GlobalStyles from './GlobalStyles';\nimport useTitle from 'components/useTitle';\nimport './scss/main.scss';\n\nfunction App() {\n  const [init, setInit] = useState(false); // 유저 로그인 로드를 기다리기 위한 flag\n  const [userObj, setUserObj] = useState(null);\n\n  const changeTitle = useTitle();\n\n  useEffect(() => {\n    changeTitle('Home');\n    onAuthStateChanged(authService, (user) => {\n      if (user) {\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName\n        });\n      } else {\n        setUserObj(false);\n      }\n      setInit(true); // 유저 로그인 되면 set true\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* 유저 로그인이 확인 되면 isLoggedIn을 true로 하고 그 전까지는 문구만 출력 */}\n      <GlobalStyles />\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj} />\n      ) : (\n        \"Initializing...\"\n      )}\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}